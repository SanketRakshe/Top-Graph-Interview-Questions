Problem Link: https://leetcode.com/problems/number-of-provinces/description/

Code:

class Solution {
private:
    void dfs(int node, vector<int> &vis, vector<int> adjList[]) {
        vis[node] = 1;

        for(auto it: adjList[node] ) {
            if(!vis[it]) {
                vis[it] = 1;
                dfs(it, vis, adjList);
            }
        }
    }
public:
    int findCircleNum(vector<vector<int>>& isConnected) {
        int n = isConnected.size();

        vector<int> adjList[n];

        for(int i = 0; i < n; i++) {
            for(int j = 0; j < n; j++) {
                if(isConnected[i][j] == 1 && i != j) {
                    adjList[i].push_back(j);
                    adjList[j].push_back(i);
                }
            }
        }

        vector<int> vis(n, 0);
        int count = 0;
        for(int i = 0; i < n; i++) {
            if(!vis[i]) {
                count++;
                dfs(i, vis, adjList);
            }
        }
        return count;
    }
};

TC = O(N) + O(V+2E) Where O(N) is for outer loop and inner loop runs in total a single DFS over entire graph, and we know DFS takes a time of O(V+2E). 
SC = O(N) + O(N),Space for recursion stack space and visited array.
