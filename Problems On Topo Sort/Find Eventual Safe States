Problem Link: https://leetcode.com/problems/find-eventual-safe-states/description/

Code:

class Solution {
private:
    bool dfs(int node, vector<vector<int>>& graph, vector<int>& vis, 
    vector<int>& pathvis, vector<int>& check) {
        vis[node] = 1;
        pathvis[node] = 1;
        check[node] = 1;

        for(auto it: graph[node]) {
            if(vis[it] == -1) {
                if(dfs(it, graph, vis, pathvis, check) == true) {
                    check[node] = 0;
                    return true;
                }
            }
            else if(pathvis[it]) {
                check[node] = 0;
                return true;
            }
        }
        check[node] = 1;
        pathvis[node] = 0;
        return false;
    }
public:
    vector<int> eventualSafeNodes(vector<vector<int>>& graph) {
        int v = graph.size();
        vector<int> vis(v, -1);
        vector<int> pathvis(v, -1);
        vector<int> check(v, 0);
        vector<int> safestates;

        for(int i = 0; i < v; i++) {
            if(vis[i] == -1) {
                dfs(i, graph, vis, pathvis, check);
            }
        }

        for(int i = 0; i < v; i++) {
            if(check[i] == 1) {
                safestates.push_back(i);
            }
        }
        return safestates;
    }
};

TC = O(V+E) + O(V)
SC = O(3N)
