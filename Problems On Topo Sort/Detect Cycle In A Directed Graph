Problem Link: https://www.codingninjas.com/studio/problems/detect-cycle-in-a-directed-graph_1062626?utm_source=striver&utm_medium=website&utm_campaign=a_zcoursetuf&leftPanelTab=0

Code:

#include<bits/stdc++.h>
int detectCycleInDirectedGraph(int n, vector < pair < int, int >> & edges) {
  vector<int> adj[n];
    
    for(auto it:edges) {
      adj[it.first-1].push_back(it.second-1);
    }
    int indegree[n]={0};
    for(int i=0; i<n; i++) {
        for(auto it:adj[i]) {
            indegree[it]++;
        }
    }
    
    queue<int> q;
    for(int i=0; i<n; i++) {
        if(indegree[i]==0) {
            q.push(i);
        }
    }
    
    int cnt=0;
    while(!q.empty()) {
        int node = q.front();
        q.pop();
        cnt++;
        
        for(auto it:adj[node]) {
            indegree[it]--;
            if(indegree[it]==0) {
                q.push(it);
            }
        }
    }
    if (cnt==n) return false;
    return true;
}

Time Complexity: O(V+E), where V = no. of nodes and E = no. of edges. This is a simple BFS algorithm.

Space Complexity: O(N) + O(N) ~ O(2N), O(N) for the indegree array, 
and O(N) for the queue data structure used in BFS(where N = no.of nodes).
