Problem Link : https://leetcode.com/problems/shortest-path-in-binary-matrix/description/

Code:

class Solution {
public:
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();

        if(grid[0][0] == 1) return -1;

        vector<vector<int>> dist(n, vector<int> (m, 1e9));

        queue<pair<int, pair<int, int>>> q;

        int delrow[] = {-1, -1, 0, 1, 1, 1, 0, -1};
        int delcol[] = {0, 1, 1, 1, 0, -1, -1, -1};

        dist[0][0] = 0;

        q.push({0, {0, 0}});

        while(!q.empty()) {
            auto it = q.front();
            int wt = it.first;
            int row = it.second.first;
            int col = it.second.second;
            q.pop();

            if(row == n-1 && col == n-1) return wt + 1;

            for(int i = 0; i < 8; i++) {
                int nrow = row + delrow[i];
                int ncol = col + delcol[i];

                if(nrow >= 0 && nrow < n && ncol >= 0 && ncol < m &&
                grid[nrow][ncol] == 0 && wt + 1 < dist[nrow][ncol]) {
                    dist[nrow][ncol] = wt + 1;
                    q.push({wt + 1, {nrow, ncol}});
                }
            }
        }
        return -1;
    }
};

Time Complexity: O( 4*N*M ) { N*M are the total cells, 
for each of which we also check 8 adjacent nodes for the shortest path length},
Where N = No. of rows of the binary maze and M = No. of columns of the binary maze.

Space Complexity: O( N*M ), Where N = No. of rows of the binary maze and M = No. of columns of the binary maze.
