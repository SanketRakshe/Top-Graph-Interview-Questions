Problem Link : https://leetcode.com/problems/path-with-minimum-effort/description/

Code:

class Solution {
public:
    int minimumEffortPath(vector<vector<int>>& heights) {
        int n = heights.size();
        int m = heights[0].size();
        //{diff, {row, col}}
        priority_queue<pair<int , pair<int, int>> , 
        vector<pair<int, pair<int, int>>>, 
        greater<pair<int, pair<int, int>>>> pq;

        vector<vector<int>> dist(n, vector<int>(m, 1e9));

        dist[0][0] = 0;

        pq.push({0, {0, 0}});

        int delrow[] = {-1, 0, 1, 0};
        int delcol[] = {0, 1, 0, -1};

        while(!pq.empty()) {
            auto it = pq.top();
            pq.pop();
            int diff = it.first;
            int row = it.second.first;
            int col = it.second.second;
            

            if(row == n-1 && col == m-1) {
                return diff;
            }

            for(int i = 0; i < 4; i++) {
                int drow = row + delrow[i];
                int dcol = col + delcol[i];

                if(drow >= 0 && drow < n && dcol >= 0 && dcol < m) {
                    int newefforts = max(diff, abs(heights[row][col] - heights[drow][dcol]));
                    if(newefforts < dist[drow][dcol]) {
                        dist[drow][dcol] = newefforts;
                        pq.push({newefforts, {drow, dcol}});
                    }
                }
            }
        }
        return 0;
    }
};

Time Complexity: O( 4*N*M * log( N*M) ) { N*M are the total cells, 
for each of which we also check 4 adjacent nodes for the minimum effort and additional log(N*M) for insertion-deletion operations in a priority queue } 
Where, N = No. of rows of the binary maze and M = No. of columns of the binary maze.

Space Complexity: O( N*M ) { Distance matrix containing N*M cells
+ priority queue in the worst case containing all the nodes ( N*M) }.
Where, N = No. of rows of the binary maze and M = No. of columns of the binary maze.
