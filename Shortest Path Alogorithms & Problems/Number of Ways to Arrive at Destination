Problem Link: https://leetcode.com/problems/number-of-ways-to-arrive-at-destination/description/

Code:

class Solution {
private:
    int dijkstra(vector<pair<int, int>> adj[], int n ) {
        int mod = 1e9 + 7;

        priority_queue<pair<long long, long long>, 
        vector<pair<long long, long long>>, 
        greater<pair<long long, long long>>> pq;

        vector<long long> dist(n, 1e15);
        vector<long long> path(n, 0);

        dist[0] = 0;
        path[0] = 1;

        pq.push({0,0});

        while(!pq.empty()) {
            long long dis = pq.top().first;
            long long node = pq.top().second;
            pq.pop();

            for(auto &it: adj[node]) {
                int adjNode = it.first;
                long long edwt = it.second;

                if(dis + edwt < dist[adjNode]) {
                    dist[adjNode] = dis + edwt;
                    path[adjNode] = path[node];
                    pq.push({dis+edwt, adjNode});
                } 
                else if(dis + edwt == dist[adjNode]) {
                    path[adjNode] = (path[node] + path[adjNode]) % mod;
                }
            }
        }
        return path[n-1] % mod;
    }
public:
    int countPaths(int n, vector<vector<int>>& roads) {
        vector<pair<int, int>> adj[n];
        //create the graph

        for(auto it: roads) {
            adj[it[0]].push_back({it[1], it[2]});
            adj[it[1]].push_back({it[0], it[2]});
        }
        return dijkstra(adj, n);

    }
};

Time Complexity: O( E* log(V)) { As we are using simple Dijkstraâ€™s algorithm here, the time complexity will be or the order E*log(V)}
Where E = Number of edges and V = No. of vertices.

Space Complexity :  O(N) { for dist array + ways array + approximate complexity for priority queue }
Where, N = Number of nodes.
