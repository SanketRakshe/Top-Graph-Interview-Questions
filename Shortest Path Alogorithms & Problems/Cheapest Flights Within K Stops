Problem Link: https://leetcode.com/problems/cheapest-flights-within-k-stops/description/

Code:

class Solution {
public:
    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {
        vector<pair<int, int>> adj[n];

        for(auto it: flights) {
            adj[it[0]].push_back({it[1], it[2]});
        }

        vector<int> dist(n, 1e9);
        dist[src] = 0;

        //{stops, {node, cost}}
        queue<pair<int, pair<int, int>>> q;
        q.push({0, {src, 0}});

        while(!q.empty()) {
            int stops = q.front().first;
            int node = q.front().second.first;
            int cost = q.front().second.second;
            q.pop();

            if(stops > k) continue;

            for(auto it: adj[node]) {
                int adjNode = it.first;
                int edgwt = it.second;

                if(cost + edgwt < dist[adjNode] && stops <= k) {
                    dist[adjNode] = cost + edgwt;
                    q.push({stops+1, {adjNode, dist[adjNode]}});
                }
            }
        }
        if(dist[dst] == 1e9) return -1;

        return dist[dst];
    }
};

Time Complexity: O( N ) { Additional log(N) of time eliminated here because we’re using a 
simple queue rather than a priority queue which is usually used in Dijkstra’s Algorithm }.
Where N = Number of flights / Number of edges.

Space Complexity:  O( |E| + |V| ) { for the adjacency list, priority queue, and the dist array }.
Where E = Number of edges (flights.size()) and V = Number of Airports.
